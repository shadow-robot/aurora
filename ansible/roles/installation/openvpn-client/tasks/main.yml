---
- name: Install OpenVPN dependencies
  apt:
    name: ["apt-transport-https"]
    state: "present"
  become: yes

- name: Add OpenVPN repo apt key
  apt_key:
    url: "https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub"
    state: "present"
  become: yes

- name: Add OpenVPN repository
  apt_repository:
    repo: "{{ openvpn_apt_repository }}"
    state: "present"
    update_cache: "yes"
  become: yes

- name: Install OpenVPN
  apt:
    name: openvpn3
    state: "present"
  become: yes

- name: Connect to Shadow AWS API
  uri:
    url: https://5vv2z6j3a7.execute-api.eu-west-2.amazonaws.com/prod
    method: GET
    return_content: yes
    headers:
      x-api-key: "{{ customer_key }}"
  register: response_private

- name: Get vpn client credentials for teleop server
  set_fact:
    vpn_client_credentials_base64: "{{ response_private.content | regex_search('(?<=TELEOP_SERVER_VPN_CRED=)(.*)(?=\\nTELEOP_SERVER_VPN_USERNAME)', multiline=True) }}"
    vpn_username: "{{ response_private.content | regex_search('(?<=TELEOP_SERVER_VPN_USERNAME=)(.*)(?=\\nTELEOP_SERVER_VPN_PASSWORD)', multiline=True) }}"
    vpn_password: "{{ response_private.content | regex_search('(?<=TELEOP_SERVER_VPN_PASSWORD=)(.*)(?=\\nTELEOP_CLIENT_VPN_CRED)', multiline=True) }}"
    vpn_ip_range: "{{ response_private.content | regex_search('(?<=TELEOP_VPN_IP_RANGE=)(.*)(?=\\nCUSTOMER_NAME)', multiline=True) }}"
  when: inventory_hostname==hostvars[groups['server'][0]]['inventory_hostname']

- name: Get vpn client credentials for teleop client
  set_fact:
    vpn_client_credentials_base64: "{{ response_private.content | regex_search('(?<=TELEOP_CLIENT_VPN_CRED=)(.*)(?=\\nTELEOP_CLIENT_VPN_USERNAME)', multiline=True) }}"
    vpn_username: "{{ response_private.content | regex_search('(?<=TELEOP_CLIENT_VPN_USERNAME=)(.*)(?=\\nTELEOP_CLIENT_VPN_PASSWORD)', multiline=True) }}"
    vpn_password: "{{ response_private.content | regex_search('(?<=TELEOP_CLIENT_VPN_PASSWORD=)(.*)(?=\\nTELEOP_VPN_IP_RANGE)', multiline=True) }}"
    vpn_ip_range: "{{ response_private.content | regex_search('(?<=TELEOP_VPN_IP_RANGE=)(.*)(?=\\nCUSTOMER_NAME)', multiline=True) }}"
  when: inventory_hostname==hostvars[groups['client'][0]]['inventory_hostname']

- name: Customer_key is not authorized to remote teleop
  fail:
    msg: "Invalid customer_key for remote teleop. Please contact Shadow Robot Company with your customer_key and check that you have been authorized to use remote teleop"
  when: vpn_client_credentials_base64==""

- name: Ensures that openvpn3 config directory exists
  file:
    path: "{{ openvpn_config_folder }}"
    state: directory

- name: Write vpn credentials to .ovpn file
  copy:
    content: "{{ vpn_client_credentials_base64 | b64decode }}"
    dest: "{{ openvpn_config_folder }}/{{ ovpn_filename }}"
    mode: '775'
  changed_when: false

- name: Creating the .autoload file
  template:
    src: templates/autostart.j2
    dest: "{{ openvpn_config_folder }}/{{ autoload_filename }}"
    mode: '775'
  become: yes

- name: Copy OpenVPN desktop icon
  copy: 
    src: ../../products/common/resources/files/openvpn.png
    dest: "{{ shadow_hand_launcher_folder }}/openvpn.png"
    mode: '664'

- name: Create OpenVPN executable launch script
  blockinfile:
    path: "{{ shadow_hand_launcher_folder }}/openvpn.sh"
    mode: '755'
    create: true
    block: | 
      #!/bin/bash
      openvpn3-autoload --directory {{ openvpn_config_folder }}
      watch -n 1 'openvpn3 sessions-list && echo "Assigned IP and subnet\n$(ip addr show tun0 | grep tun0 | grep inet)"'

- name: Create openVPN desktop icon
  template:
    src: ../../products/common/resources/templates/desktop-icons/standard-icon.j2
    dest: "{{ user_folder }}/Desktop/Shadow OpenVPN.desktop"
    mode: '755'
  vars:
    desktop_shortcut_name: Shadow OpenVPN
    comment: "This is application launches Shadow OpenVPN"
    folder: "{{ shadow_hand_launcher_folder }}"
    shell_script_file_name: openvpn.sh
    icon_file_name: openvpn.png
    start_terminal: "false"

- name: Make Shadow OpenVPN desktop icon Trusted
  shell: gio set "{{ user_folder }}/Desktop/Shadow OpenVPN.desktop" "metadata::trusted" yes
  when:
    - ansible_distribution|string == 'Ubuntu'
    - ansible_distribution_release|string == 'bionic'
    - skip_molecule_task is not defined
