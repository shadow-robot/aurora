---
- name: Install OpenVPN dependencies
  apt:
    name: ["easy-rsa"]
    state: "present"

- name: Add OpenVPN repo apt key
  apt_key:
    url: "https://swupdate.openvpn.net/repos/repo-public.gpg"
    id: "30EBF4E73CCE63EEE124DD278E6DA8B4E158C569"
    state: "present"

- name: Add OpenVPN repository
  apt_repository:
    repo: "{{ openvpn_apt_repository }}"
    state: "present"
    update_cache: "yes"

- name: Install OpenVPN
  apt:
    name: openvpn
    state: "present"

- name: Remove CA directory
  become: yes
  file:
    state: absent
    path: "{{ user_folder }}/openvpn-ca/"

- name: Create CA directory
  become: yes
  command: make-cadir {{ user_folder }}/openvpn-ca

- name: Customize CA variable configuration
  lineinfile:
    dest: "{{ user_folder }}/openvpn-ca/vars"
    regexp: "^{{ item.property | regex_escape() }}="
    line: "{{ item.property }}={{ item.value }}"
  with_items:
    - { property: "export KEY_NAME", value: '"server"' }
    - { property: "export KEY_COUNTRY", value: '"UK"' }
    - { property: "export KEY_PROVINCE", value: '"UK"' }
    - { property: "export KEY_CITY", value: '"London"' }
    - { property: "export KEY_ORG", value: '"ShadowRobot"' }
    - { property: "export KEY_EMAIL", value: '"openvpn@shadowrobot.com"' }
    - { property: "export KEY_OU", value: '"ShadowRobot"' }
    - { property: "export KEY_CONFIG", value: "{{ user_folder }}/openvpn-ca/openssl-1.0.0.cnf" }
    - { property: "export KEY_DIR", value: "{{ user_folder }}/openvpn-ca/keys" }

- name: Build the certificate authority
  become: yes
  shell: >
    source vars;
    ./clean-all;
    yes "" | ./build-ca;
  args:
    chdir: "{{ user_folder }}/openvpn-ca/"
    executable: /bin/bash

- name: Build server certificate
  become: yes
  shell: >
    source vars;
    ./build-key-server --batch server;
  args:
    chdir: "{{ user_folder }}/openvpn-ca/"
    executable: /bin/bash

- name: Build Diffie-Hellman parameters and key generation
  become: yes
  shell: >
    source vars;
    yes "" | ./build-dh;
    openvpn --genkey --secret keys/ta.key;
  args:
    chdir: "{{ user_folder }}/openvpn-ca/"
    executable: /bin/bash

- name: Copy key and certificates to /etc/openvpn
  become: yes
  copy:
    remote_src: yes
    src: "{{ user_folder }}/openvpn-ca/keys/{{ item }}"
    dest: "/etc/openvpn/"
  with_items:
    - "ca.crt"
    - "server.crt"
    - "server.key"
    - "ta.key"
    - "dh2048.pem"

- name: Generate server.conf from sample config
  become: yes
  shell: >
    gzip -d -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf > /dev/null
- name: Adjust OpenVPN server configuration
  lineinfile:
    dest: "/etc/openvpn/server.conf"
    regexp: "^{{ item.regex | regex_escape() }}"
    line: "{{ item.value }}"
  with_items:
    - { regex: ";user nobody", value: "user nobody" }
    - { regex: ";group nogroup", value: "group nogroup" }
    - {
        regex: ';push "redirect-gateway def1 bypass-dhcp"',
        value: 'push "redirect-gateway def1 bypass-dhcp"',
      }
    - { regex: "cert server.crt", value: "cert server.crt" }
    - { regex: "key server.key", value: "key server.key" }

- name: Configuration IP forwarding
  become: true
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Add ufw before content
  become: true
  blockinfile:
    path: /etc/ufw/before.rules
    insertbefore: BOF
    content: |
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
      COMMIT

- name: Customize ufw forwarding policy
  become: true
  lineinfile:
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
    path: "/etc/default/ufw"
    regexp: '^DEFAULT_FORWARD_POLICY="DROP"'

- name: Open ufw ports for openvpn and ssh
  become: true
  shell: ufw allow openvpn && ufw allow OpenSSH

- name: Enable ufw
  become: true
  shell: ufw --force enable

- name: Start openvpn systemd service
  become: true
  systemd:
    name: openvpn@server
    state: started
    daemon_reload: yes
    enabled: yes

- name: Generate client certificate key
  become: yes
  shell: source vars; ./build-key --batch {{ client_name }}
  args:
    chdir: "{{ user_folder }}/openvpn-ca/"
    executable: /bin/bash

- name: Create client certificate configs dir
  become: yes
  file:
    owner: "{{ user }}"
    group: "{{ user }}"
    path: "{{ user_folder }}/openvpn-ca/{{ client_name }}"
    state: directory
    mode: 0700

- name: Copy client sample configs from remote host itself
  become: yes
  copy:
    remote_src: yes
    src: /usr/share/doc/openvpn/examples/sample-config-files/client.conf
    dest: "{{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn"

- name: Set the server ip and port
  lineinfile:
    dest: "{{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn"
    regexp: "^{{ item.regex | regex_escape() }}"
    line: "{{ item.value }}"
  with_items:
    - {
        regex: "remote my-server-1 1194",
        value: 'remote {{ groups["servers"][0] }} 1194',
      }
    - { regex: ";user nobody", value: "user nobody" }
    - { regex: ";group nogroup", value: "group nogroup" }
    - { regex: "ca ca.crt", value: "#ca ca.crt" }
    - { regex: "cert client.crt", value: "#cert client.crt" }
    - { regex: "key client.key", value: "#key client.key" }
    - { regex: "tls-auth ta.key 1", value: "#tls-auth ta.key 1" }

- name: Create client ovpn file
  become: yes
  shell: "{{ item }}"
  with_items:
    - echo -e '<ca>' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - cat {{ user_folder }}/openvpn-ca/keys/ca.crt >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - echo -e '</ca>\n<cert>' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - cat {{ user_folder }}/openvpn-ca/keys/{{ client_name }}.crt >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - echo -e '</cert>\n<key>' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - cat {{ user_folder }}/openvpn-ca/keys/{{ client_name }}.key >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - echo -e '</key>\n<tls-auth>' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - cat {{ user_folder }}/openvpn-ca/keys/ta.key >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - echo -e '</tls-auth>' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
    - echo -e 'key-direction 1' >> {{ user_folder }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
  args:
    chdir: "{{ user_folder }}/openvpn-ca/"
    executable: /bin/bash

- name: Fetch client configurations
  fetch:
    src: "{{ user_folder }}/openvpn-ca/{{ client_name }}/{{ item|basename }}"
    dest: "{{ destination_key }}/"
    flat: yes
  with_items:
    - "{{ client_name }}.ovpn"
