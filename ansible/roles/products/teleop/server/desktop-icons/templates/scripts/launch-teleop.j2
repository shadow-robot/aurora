#jinja2: trim_blocks:False
#!/bin/bash

CONST_TIMEOUT=20

terminator --geometry "{{ term_1 }}" -T 'Launching server container...' -e "{{ shadow_hand_launcher_folder}}/shadow_server_container.sh"

elapsed_time=0
start_time=$SECONDS
proceed=false
while [ $elapsed_time -lt $CONST_TIMEOUT ]; do
  elapsed_time=$(( SECONDS - start_time ))
  if [ "$(docker ps -q -f name={{ container_name }})" ]; then
    proceed=true
    break;
  fi
done

if [ "$proceed" == false ]; then
    zenity --error --text="Teleop server container not running, execution stopped"
    docker stop {{ container_name }}
    exit 1
fi

terminator --geometry "{{ term_2 }}" -T 'Server ROS Core' -e "{{ shadow_hand_launcher_folder}}/shadow_roscore.sh"

elapsed_time=0
start_time=$SECONDS
proceed=false
while [ $elapsed_time -lt $CONST_TIMEOUT ]; do
  elapsed_time=$(( SECONDS - start_time ))
  if [[ "$(docker exec -ti {{ container_name }} bash -c "source /home/user/projects/shadow_robot/base/devel/setup.bash;rostopic list")" = */rosout* ]]; then
    proceed=true
    break;
  fi
done

if [ "$proceed" == false ]; then
    zenity --error --text="Roscore not running, execution stopped"
    docker stop {{ container_name }}
    exit 1
fi

terminator --geometry "{{ term_3 }}" -T 'NUC {{ arm_side }} hardware control loop' -e "{{ shadow_hand_launcher_folder}}/{{ control_loop_script }}"
sleep 30 # temporary workaround until arm controllers starting on time is fixed
terminator --geometry "{{ term_4 }}" -T 'Server {{ arm_side }} GUI' -e "{{ shadow_hand_launcher_folder}}/{{ gui_script }}"
if [[ "{{ glove }}" == "haptx"  ]]; then
  terminator --geometry "{{ term_5 }}" -T 'Server HaptX {{ arm_side }} Mapping' -e "{{ shadow_hand_launcher_folder}}/{{ haptx_mapping_script }}"
fi
