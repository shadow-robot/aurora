---
- name: Set client_ip
  set_fact:
    client_ip: "{{ groups['client'][0] }}"

- name: Set server hostname
  set_fact:
    server_hostname: "{{ hostvars[groups['server'][0]]['ansible_host'] }}"
  when: groups['server'] is defined

- name: Setup script names
  set_fact:
    setup_script: teleop-client-setup.sh
    upgrade_script: "upgrade_image.sh"

- name: Include installation/docker role
  include_role:
    name: installation/docker

- name: Include installation/lxml role
  include_role:
    name: installation/lxml

- name: Include installation/terminator role
  include_role:
    name: installation/terminator

- name: Include installation/nvidia-docker role
  include_role:
    name: installation/nvidia-docker
  when: nvidia_docker | bool

- name: Include installation/openvpn-client role
  include_role:
    name: installation/openvpn-client

- name: Include installation/zoom role
  include_role:
    name: installation/zoom

- name: Include installation/v4l-utils role
  include_role:
    name: installation/v4l-utils

- name: Set chrony server ip
  set_fact:
    chrony_server_ip: "{{ groups['server'][0] }}"
  when: groups['server'] is defined

- name: Include installation/chrony-client role
  include_role:
    name: installation/chrony-client

- name: Include installation/shadow_glove_driver role
  include_role:
    name: installation/shadow_glove_driver
  when: glove == "shadow_glove" and real_glove|bool and skip_molecule_task is not defined

- name: Include docker/docker-image role
  include_role:
    name: docker/docker-image

- name: Get screen width
  shell: "xrandr --current | grep '*' | awk '{print $1}' | uniq | cut -d 'x' -f1"
  register: xrandr_width
  changed_when: xrandr_width.rc != 0

- name: Get screen height
  shell: "xrandr --current | grep '*' | awk '{print $1}' | uniq | cut -d 'x' -f2"
  register: xrandr_height
  changed_when: xrandr_height.rc != 0

- name: Set terminator dimensions and locations
  set_fact:
    term_width: "{{ ((xrandr_width.stdout|int)*0.26)|int }}"
    term_height: "{{ ((xrandr_height.stdout|int)*0.37)|int }}"
    term_x: "{{ ((xrandr_width.stdout|int)*0.10)|int }}"
    term_y: 0
    term_y_correction: 58
    term_1: "{{ term_width }}x{{ term_height }}+{{ term_x }}+{{ term_y }}"
    term_2: "{{ term_width }}x{{ term_height }}+{{ term_x }}+{{ term_y|int + term_height|int +term_y_correction|int }}"
    term_3: "{{ term_width }}x{{ term_height }}+{{ term_x|int + term_width|int }}+{{ term_y }}"
    term_4: "{{ term_width }}x{{ term_height }}+{{ term_x|int + term_width|int }}+{{ term_y|int + term_height|int +term_y_correction|int }}"
    term_5: "{{ term_width }}x{{ term_height }}+{{ term_x|int + 2*term_width|int }}+{{ term_y }}"
    term_6: "{{ term_width }}x{{ term_height }}+{{ term_x|int + 2*term_width|int }}+{{ term_y|int + term_height|int +term_y_correction|int }}"

- name: Ensures that Desktop folder exists
  file:
    path: "{{ user_folder }}/Desktop"
    mode: '755'
    state: directory

- name: Custom shared volume for user Shadow Glove calibration
  block:
  - name: Set shadow_glove_calibration_folder folder names
    set_fact:
      shadow_glove_calibration_folder: "{{ user_folder }}/Desktop/shadow_glove_calibration"
      shadow_glove_calibration_inside_docker: "/home/user/shadow_glove_calibration"

  - name: Set shadow glove user calibration and boresight calibration folder names
    set_fact:
      user_shadow_glove_calibration_folder: "{{ shadow_glove_calibration_folder }}/user_calibration"
      user_shadow_glove_calibration_inside_docker: "{{ shadow_glove_calibration_inside_docker }}/user_calibration"
      user_shadow_glove_calibration_defaults_inside_docker: "/home/user/projects/shadow_robot/base/src/sr_teleop_vive_polhemus_internal/sr_teleop_vive_polhemus/shadow_glove_user_calibration_defaults/."
      user_shadow_glove_calibration_defaults_inside_docker_binary: "/opt/ros/shadow/share/sr_teleop_vive_polhemus/shadow_glove_user_calibration_defaults/."
      boresight_calibration_folder: "{{ shadow_glove_calibration_folder }}/glove_boresight_calibration"
      boresight_calibration_inside_docker: "{{ shadow_glove_calibration_inside_docker }}/glove_boresight_calibration"
      boresight_calibration_default_file_inside_docker: "/home/user/projects/shadow_robot/base/src/polhemus_ros_driver/config/{{ polhemus_type }}_calibration.yaml"

  - name: Ensure {{ shadow_glove_calibration_folder }} folder exists
    file:
      path: "{{ shadow_glove_calibration_folder }}"
      mode: '755'
      state: directory

  - name: Ensure {{ user_shadow_glove_calibration_folder }} folder exists
    file:
      path: "{{ user_shadow_glove_calibration_folder }}"
      mode: '755'
      state: directory

  - name: Ensure {{ boresight_calibration_folder }} folder exists
    file:
      path: "{{ boresight_calibration_folder }}"
      mode: '755'
      state: directory

  - name: Set custom shared volumes for docker container
    set_fact:
      custom_shared_volumes: 
        - "{{ shadow_glove_calibration_folder }}:{{ shadow_glove_calibration_inside_docker }}"

  when: glove == "shadow_glove" and real_glove|bool

- name: Check if the ssh public key has been generated and copied to temp_ssh_keys_path folder on machine running Ansible (server laptop)
  stat:
    path: "{{ temp_ssh_keys_path }}.pub"
  register: ssh_result
  delegate_to: 127.0.0.1

- name: Check if the ssh private key has been generated and copied to temp_ssh_keys_path folder on machine running Ansible (server laptop)
  stat:
    path: "{{ temp_ssh_keys_path }}"
  register: ssh_result_private
  delegate_to: 127.0.0.1

- name: Ensure the .ssh folder exists
  file:
    path: "{{ user_folder }}/.ssh/"
    mode: '700'
    state: directory

- name: Copy SSH public key from server to client laptop (if it exists in server laptop)
  copy:
    src: "{{ temp_ssh_keys_path }}.pub"
    dest: "{{ ssh_keys_path }}.pub"
    mode: '644'
  when: ssh_result.stat.exists
  changed_when: false
  become: yes

- name: Copy SSH private key from server to client laptop (if it exists in server laptop)
  copy:
    src: "{{ temp_ssh_keys_path }}"
    dest: "{{ ssh_keys_path }}"
    mode: '644'
  when: ssh_result_private.stat.exists
  changed_when: false
  become: yes

- name: Register SSH public key with current user on the client laptop
  authorized_key:
    user: "{{ user }}"
    key: "{{ lookup('file', '{{ temp_ssh_keys_path }}.pub') }}"
    state: present
  when: ssh_result.stat.exists
  changed_when: false
  become: yes

- name: Include products/common/docker-container role
  include_role:
    name: products/common/docker-container
  vars:
    ros_master: "{{ server_hostname }}"
    container_terminal_title: "Teleop Client Container"
    term_args: "--geometry {{ term_1 }}"

- name: Copy the default shadow glove user and boresight calibration files to the host
  block:
  - name: Copying default files from non-binary docker container path {{ user_shadow_glove_calibration_defaults_inside_docker }} to the host folder {{ user_shadow_glove_calibration_folder }}
    changed_when: false
    shell: "docker cp  {{ container_name }}:{{ user_shadow_glove_calibration_defaults_inside_docker }} {{ user_shadow_glove_calibration_folder }}"
    become: yes
    ignore_errors: yes
    when: "'binary' not in image"

  - name: Copying default files from binary docker container path {{ user_shadow_glove_calibration_defaults_inside_docker_binary }} to the host folder {{ user_shadow_glove_calibration_folder }}
    changed_when: false
    shell: "docker cp  {{ container_name }}:{{ user_shadow_glove_calibration_defaults_inside_docker_binary }} {{ user_shadow_glove_calibration_folder }}"
    become: yes
    ignore_errors: yes
    when: "'binary' in image"

  - name: Check if the {{ polhemus_type }}_calibration.yaml exists on the host shared volume
    stat: 
      path: "{{ boresight_calibration_folder }}/{{ polhemus_type }}_calibration.yaml"
    register: boresight_calibration_file
    ignore_errors: yes

  - name: If the default calibration doesn't exist, copy the default boresight calibration file from docker container path {{ boresight_calibration_default_file_inside_docker }} to the host folder {{ boresight_calibration_folder }}
    changed_when: false
    shell: "docker cp  {{ container_name }}:{{ boresight_calibration_default_file_inside_docker }} {{ boresight_calibration_folder }}"
    become: yes
    ignore_errors: yes
    when: not boresight_calibration_file.stat.exists

  - name: Ensure {{ boresight_calibration_folder }}/{{ polhemus_type }}_calibration.yaml has the right permissions
    file:
      path: "{{ boresight_calibration_folder }}/{{ polhemus_type }}_calibration.yaml"
      mode: '666'
      state: file
    become: true
    ignore_errors: yes

  - name: Ensure {{ user_shadow_glove_calibration_folder }}/default_calibration_right.yaml has the right permissions
    file:
      path: "{{ user_shadow_glove_calibration_folder }}/default_calibration_right.yaml"
      mode: '666'
      state: file
    become: true
    ignore_errors: yes

  - name: Ensure {{ user_shadow_glove_calibration_folder }}/default_calibration_left.yaml has the right permissions
    file:
      path: "{{ user_shadow_glove_calibration_folder }}/default_calibration_left.yaml"
      mode: '666'
      state: file
    become: true
    ignore_errors: yes

  - name: Check if the current_calibration_right.yaml exists on the host shared volume
    stat: 
      path: "{{ user_shadow_glove_calibration_folder }}/current_calibration_right.yaml"
    register: current_calibration_file_right
    ignore_errors: yes

  - name: Check if the current_calibration_left.yaml exists on the host shared volume
    stat: 
      path: "{{ user_shadow_glove_calibration_folder }}/current_calibration_left.yaml"
    register: current_calibration_file_left
    ignore_errors: yes

  - name: Check if the default_calibration_right.yaml exists on the host shared volume
    stat: 
      path: "{{ user_shadow_glove_calibration_folder }}/default_calibration_right.yaml"
    register: default_calibration_file_right
    ignore_errors: yes

  - name: Check if the default_calibration_left.yaml exists on the host shared volume
    stat: 
      path: "{{ user_shadow_glove_calibration_folder }}/default_calibration_left.yaml"
    register: default_calibration_file_left
    ignore_errors: yes

  - name: if current_calibration_right.yaml doesn't exist but default does, copy default into it
    copy:
      src: "{{ user_shadow_glove_calibration_folder }}/default_calibration_right.yaml"
      dest: "{{ user_shadow_glove_calibration_folder }}/current_calibration_right.yaml"
      mode: '666'
    when: not current_calibration_file_right.stat.exists and default_calibration_file_right.stat.exists
    ignore_errors: yes

  - name: if current_calibration_left.yaml doesn't exist but default does, copy default into it
    copy:
      src: "{{ user_shadow_glove_calibration_folder }}/default_calibration_left.yaml"
      dest: "{{ user_shadow_glove_calibration_folder }}/current_calibration_left.yaml"
      mode: '666'
    when: not current_calibration_file_left.stat.exists and default_calibration_file_left.stat.exists
    ignore_errors: yes

  when: glove == "shadow_glove" and real_glove|bool

- name: Include docker/aws role
  include_role:
    name: docker/aws
  when: use_aws|bool

- name: Include products/common/save-logs-icons role
  include_role:
    name: products/common/save-logs-icons

- name: Include products/common/cyberglove role
  include_role:
    name: products/common/cyberglove
  when: use_cyberglove|bool

- name: Include products/common/hand-parameters role
  include_role:
    name: products/common/hand-parameters
  when: config_branch is defined and config_branch | length > 0

- name: Include products/teleop/client/desktop-icons role
  include_role:
    name: products/teleop/client/desktop-icons

- name: Copying ssh key pair into docker container
  changed_when: false
  shell: "docker cp {{ ssh_keys_path }} {{ container_name }}:/tmp/."
  become: yes

- name: if glove==shadow_glove and real_vive==true, set use_steamvr=true (override simulation scenario with real_vive)
  set_fact:
    use_steamvr: true
  when: glove=="shadow_glove" and real_vive|bool

- name: if glove==haptx and real_vive==true, set use_steamvr=false (override real robots scenario with haptx)
  set_fact:
    use_steamvr: false
  when: glove=="haptx" and real_vive|bool

- name: Creating teleop-client setup script
  template:
    src: ../../../common/resources/templates/scripts/setup-hand.j2
    dest: "{{ shadow_hand_launcher_folder }}/{{ setup_script }}"
    mode: '755'

- name: Copying teleop-client setup script into docker container
  changed_when: false
  shell: "docker cp {{ shadow_hand_launcher_folder }}/{{ setup_script }} {{ container_name }}:{{ setup_directory }}/{{ setup_script }}"
  become: yes

- name: Udev rules for vive
  get_url:
    url: https://raw.githubusercontent.com/shadow-robot/sr-build-tools/master/docker/utils/steam_udev/60-HTC-Vive-perms-Ubuntu.rules
    dest: /lib/udev/rules.d/60-HTC-Vive-perms-Ubuntu.rules
    mode: '0644'
  become: yes

- name: Udev rules for steam
  get_url:
    url: https://raw.githubusercontent.com/shadow-robot/sr-build-tools/master/docker/utils/steam_udev/99-steam-perms.rules
    dest: /lib/udev/rules.d/99-steam-perms.rules
    mode: '0644'
  become: yes

- name: Udev rules for pedal
  get_url:
    url: https://raw.githubusercontent.com/shadow-robot/sr_teleop_devices/kinetic-devel/sr_pedal/90-VEC-USB-Footpedal.rules
    dest: /lib/udev/rules.d/90-VEC-USB-Footpedal.rules
    mode: '0644'
  become: yes

- name: Reload udev rules
  shell: udevadm control --reload-rules && udevadm trigger
  changed_when: false
  become: yes
  when: skip_molecule_task is not defined

- name: Creating upgrade script
  template:
    src: ../../../common/resources/templates/scripts/upgrade_image.j2
    dest: "{{ shadow_hand_launcher_folder }}/{{ upgrade_script }}"
    mode: '755'
  when: upgrade_check|bool
