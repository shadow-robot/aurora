---
- name: Include installation/dhcp role
  include_role:
    name: installation/dhcp


# find dhcp_interface_name
# get {{ dhcp_ip }} from hostfile
# get dhcp_network from dhcp_up
#  move dhcp configure to separate task - not installation
# - name: Set NUC IP address and username for SSH
##  set_fact:
 #   nuc_username: "{{ hostvars[groups['control_machine'][0]]['ansible_user'] }}"
#    nuc_address: "{{ groups['control_machine'][0] }}"
#  when: groups['control_machine'] is defined

- name: Configure static IP for DHCP
  become: yes
  blockinfile:
    path: /etc/network/interfaces
    backup: yes
    block: |
      allow-hotplug {{ dhcp_interface_name }}
      iface {{ dhcp_interface_name }} inet static
        address {{ dhcp_ip }}
        netmask 255.255.255.0
        network {{ dhcp_network }}
        gateway {{ dhcp_ip }}
  changed_when: false

- name: Restart networking on DHCP interface
  become: true
  command: bash -c "ifdown {{ dhcp_interface_name }} && ifup {{ dhcp_interface_name }}"
  changed_when: false
  ignore_errors: true

- name: Configure DHCP interface
  become: yes
  blockinfile:
    path: /etc/default/isc-dhcp-server
    backup: yes
    block: |
      INTERFACES="{{ dhcp_interface_name }}"
  changed_when: false

  
- name: Configure DHCP
  become: yes
  blockinfile:
    path: /etc/dhcp/dhcpd.conf
    backup: yes
    block: |
      option domain-name-servers 8.8.8.8, 8.8.4.4;
      authoritative;
      subnet {{ dhcp_network }} netmask {{ dhcp_netmask }} {
        range {{ dhcp_range_start }} {{ dhcp_range_end }};
        option routers {{ dhcp_ip }};
        host server {
          hardware ethernet {{ dhcp_server_mac }};
          server-name "server";
          fixed-address {{ dhcp_ip }};
        }
        host nuc-control {
          hardware ethernet {{ dhcp_client_mac }};
          server-name "nuc-control";
          fixed-address {{ dhcp_client_ip }};
        }
      }
  changed_when: false

- name: Configure IP forwarding and routing part 1
  become: true
  command: bash -c "iptables -A FORWARD -o {{ internet_interface_name }} -i {{ dhcp_interface_name }} -s {{ dhcp_network }}/24 -m conntrack --ctstate NEW -j ACCEPT"
  changed_when: false

- name: Configure IP forwarding and routing part 2
  become: true
  command: bash -c "iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT"
  changed_when: false

- name: Configure IP forwarding and routing part 3
  become: true
  command: bash -c "iptables -t nat -F POSTROUTING"
  changed_when: false
  
- name: Configure IP forwarding and routing part 4
  become: true
  command: bash -c "iptables -t nat -A POSTROUTING -o {{ internet_interface_name }} -j MASQUERADE"
  changed_when: false

- name: Save the iptables
  become: true
  command: bash -c "iptables-save | sudo tee /etc/iptables.sav"
  changed_when: false

- name: Edit /etc/rc.local
  become: yes
  blockinfile:
    path: /etc/rc.local
    backup: yes
    block: |
      iptables-restore < /etc/iptables.sav
    insertbefore: "exit 0"
  changed_when: false

- name: Stop DHCP service
  become: true
  command: bash -c "systemctl stop isc-dhcp-server.service"
  changed_when: false

- name: Restart networking on DHCP interface (after iptables is set)
  become: true
  command: bash -c "ifdown {{ dhcp_interface_name }} && ifup {{ dhcp_interface_name }}"
  changed_when: false
  ignore_errors: true

- name: Start DHCP service
  become: true
  command: bash -c "systemctl start isc-dhcp-server.service"
  changed_when: false

- name: Set NUC IP address and username for SSH
  set_fact:
    nuc_username: "{{ hostvars[groups['control_machine'][0]]['ansible_user'] }}"
    nuc_address: "{{ groups['control_machine'][0] }}"
  when: groups['control_machine'] is defined

- name: Setup script name
  set_fact:
    setup_script: server-setup.sh
    upgrade_script: "upgrade_image.sh"

- name: Include installation/docker role
  include_role:
    name: installation/docker

- name: Include installation/nvidia-docker role
  include_role:
    name: installation/nvidia-docker
  when: nvidia_docker | bool

- name: Set chrony allowed network
  set_fact:
    chrony_allowed_network: "0/0"
  when: groups['server'] is defined

- name: Include installation/chrony-server role
  include_role:
    name: installation/chrony-server

- name: Include docker/docker-image role
  include_role:
    name: docker/docker-image

- name: Include products/common/docker-container role
  include_role:
    name: products/common/docker-container

- name: Include products/common/cyberglove role
  include_role:
    name: products/common/cyberglove
  when: use_cyberglove|bool

- name: Include docker/aws role
  include_role:
    name: docker/aws
  when: use_aws|bool

- name: Include products/common/save-logs-icons role
  include_role:
    name: products/common/save-logs-icons

- name: Include products/hand-e/server/desktop-icons role
  include_role:
    name: products/hand-e/server/desktop-icons

- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
  openssh_keypair:
    path: "{{ ssh_keys_path }}"

- name: Evaluating the SSH agent
  shell: "eval $(ssh-agent)"
  changed_when: false

- name: Adding the ssh identity
  shell: "ssh-add {{ ssh_keys_path }}"
  changed_when: false
  when: skip_molecule_task is not defined

- name: Creating server setup script
  template:
    src: ../../../common/resources/templates/scripts/server-setup.j2
    dest: "{{ shadow_hand_launcher_folder }}/{{ setup_script }}"
    mode: '755'

- name: Copying the server setup script into docker container
  changed_when: false
  shell: "docker cp {{ shadow_hand_launcher_folder }}/{{ setup_script }} {{ container_name }}:{{ setup_directory }}/{{ setup_script }}"
  become: yes

- name: Creating upgrade script
  template:
    src: ../../../common/resources/templates/scripts/upgrade_image.j2
    dest: "{{ shadow_hand_launcher_folder }}/{{ upgrade_script }}"
    mode: '755'
  when: upgrade_check|bool
