#jinja2: trim_blocks:False
#!/bin/bash
NUC_NAME={{ nuc_username }}
NUC_ADDRESS={{ nuc_address }}
LOCAL_IP={{ server_ip }}

chrony_status=$(ssh {{ nuc_username }}@{{ nuc_address }} chronyc -n tracking | grep {{ server_ip }} | wc -l)
if [ $chrony_status -eq 0 ]; then
    echo "NUC lost chrony tracking. Restarting chrony on server and NUC..."
    sudo systemctl restart chrony.service
    sleep 3    
    ssh {{ nuc_username }}@{{ nuc_address }} sudo systemctl restart chrony.service
    sleep 3
fi

ssh -X $NUC_NAME@$NUC_ADDRESS CONTAINER={{ container_name }} PWM_CONTROL={{ pwm_control_var }} HAND_CTRL={{ hand_ctrl_var }} HOST_IP=$LOCAL_IP NUC_ADDRESS=$NUC_ADDRESS UR_TYPE={{ ur_robot_type }} ARM={{ arm_ctrl_var }} ARM_PAYLOAD_MASS={{ arm_payload_mass }} HAND_SIDE_AD={{ ad_hand_side }} 'bash -s' <<'ENDSSH'
bash $(while [[ $(ss | grep $HOST_IP | grep $NUC_ADDRESS | grep ssh | grep ESTAB | wc -l) -gt 0 ]]; do sleep 1; done ; pkill -INT -f roslaunch) &
docker stop ${CONTAINER}
sleep 2
docker start ${CONTAINER}
echo "Starting the container..."
sleep 3
docker exec --user user ${CONTAINER} bash -c "export ROSCONSOLE_FORMAT='"'[${severity}](${node}): [${time}] ${message}'"';export ROSCONSOLE_STDOUT_LINE_BUFFERED=1;source /home/user/projects/shadow_robot/base/devel/setup.bash;ulimit -c unlimited;/bin/update_hand_config.sh;sr_hand_autodetect ${HAND_SIDE_AD} roslaunch sr_robot_launch sr_hardware_control_loop.launch arm:=${ARM} pwm_control:=${PWM_CONTROL} hand_ctrl:=${HAND_CTRL} robot_model:=${UR_TYPE} arm_payload_mass:=${ARM_PAYLOAD_MASS} 2> >(tee -a /home/user/.ros/log/stderr.log)"
ENDSSH
sleep infinity
