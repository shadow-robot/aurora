---
- name: Only execute hand-parameters if config_branch is not empty. Current value is {{ config_branch }}
  block:
  - name: Set launch file paths for getting hand_serial
    set_fact:
      launch_file_path_right: "{{ shadow_hand_launcher_folder }}/sr_rhand.launch"
      launch_file_path_left: "{{ shadow_hand_launcher_folder }}/sr_lhand.launch"
      launch_file_path_bimanual: "{{ shadow_hand_launcher_folder }}/sr_bimanual.launch"

  - name: Download the right launch file from sr-config branch {{ config_branch }} from Github
    get_url:
      url: "https://raw.githubusercontent.com/shadow-robot/sr-config/{{ config_branch }}/sr_ethercat_hand_config/launch/sr_rhand.launch"
      dest: "{{ launch_file_path_right }}"
      mode: '755'
      force: yes
    when: bimanual|bool or hand_side=="right"

  - name: Download the left launch file from sr-config branch {{ config_branch }} from Github
    get_url:
      url: "https://raw.githubusercontent.com/shadow-robot/sr-config/{{ config_branch }}/sr_ethercat_hand_config/launch/sr_lhand.launch"
      dest: "{{ launch_file_path_left }}"
      mode: '755'
      force: yes
    when: bimanual|bool or hand_side=="left"

  - name: Download the bimanual launch file from sr-config branch {{ config_branch }} from Github
    get_url:
      url: "https://raw.githubusercontent.com/shadow-robot/sr-config/{{ config_branch }}/sr_ethercat_hand_config/launch/sr_bimanual.launch"
      dest: "{{ launch_file_path_bimanual }}"
      mode: '755'
      force: yes
    when: bimanual|bool

  - name: Get the right hand_serial xml_response from the right launch file
    xml:
      path: "{{ launch_file_path_right }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'hand_serial')]/.."
      content: attribute
    register: xml_response_right
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Set the right hand_serial from xml_response_right
    set_fact:
      hand_serial: "{{ xml_response_right.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Get the left hand_serial xml_response from the left launch file
    xml:
      path: "{{ launch_file_path_left }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'hand_serial')]/.."
      content: attribute
    register: xml_response_left
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Set the left hand_serial from xml_response_left
    set_fact:
      hand_serial_left: "{{ xml_response_left.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Get the right xacro xml_response from the right launch file
    xml:
      path: "{{ launch_file_path_right }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'robot_description')]/.."
      content: attribute
    register: xml_response_right_xacro
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Set the right xacro from xml_response_right_xacro
    set_fact:
      xacro_right: "{{ xml_response_right_xacro.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Get the left xacro xml_response from the left launch file
    xml:
      path: "{{ launch_file_path_left }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'robot_description')]/.."
      content: attribute
    register: xml_response_left_xacro
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Set the left xacro from xml_response_left_xacro
    set_fact:
      xacro_left: "{{ xml_response_left_xacro.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Get the bimanual xacro xml_response from the bimanual launch file
    xml:
      path: "{{ launch_file_path_bimanual }}"
      xpath: "//attribute::*[contains(., 'sr_bimanual.launch')]/..//attribute::*[contains(., 'robot_description')]/.."
      content: attribute
    register: xml_response_bimanual_xacro
    ignore_errors: yes
    when: bimanual|bool

  - name: Set the bimanual xacro from xml_response_bimanual_xacro
    set_fact:
      xacro_bimanual: "{{ xml_response_bimanual_xacro.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool

  - name: Get the mapping_path_right xml_response from the right launch file
    xml:
      path: "{{ launch_file_path_right }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'mapping_path')]/.."
      content: attribute
    register: xml_response_right_mapping_path
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Set the mapping_path_right from xml_response_right_mapping_path
    set_fact:
      mapping_path_right: "{{ xml_response_right_mapping_path.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="right"

  - name: Get the mapping_path_left xml_response from the left launch file
    xml:
      path: "{{ launch_file_path_left }}"
      xpath: "//attribute::*[contains(., 'srhand.launch')]/..//attribute::*[contains(., 'mapping_path')]/.."
      content: attribute
    register: xml_response_left_mapping_path
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Set the mapping_path_left from xml_response_left_mapping_path
    set_fact:
      mapping_path_left: "{{ xml_response_left_mapping_path.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool or hand_side=="left"

  - name: Get the bimanual robot_config xml_response from the bimanual launch file
    xml:
      path: "{{ launch_file_path_bimanual }}"
      xpath: "//attribute::*[contains(., 'sr_bimanual.launch')]/..//attribute::*[contains(., 'robot_config_file')]/.."
      content: attribute
    register: xml_response_bimanual_robot_config
    ignore_errors: yes
    when: bimanual|bool

  - name: Set the bimanual robot_config from xml_response_bimanual_robot_config
    set_fact:
      robot_config_bimanual: "{{ xml_response_bimanual_robot_config.matches[0].arg.value }}"
    ignore_errors: yes
    when: bimanual|bool

  when: config_branch is defined and config_branch | length > 0
